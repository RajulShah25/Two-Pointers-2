// time complexity  O(n)
// space complexity O(1)
// explanation - as there are two corners where we have strict increasing and decreasing directions, we can use either of them and start running our test on them.
// if we pick right top corner, then the elements below it in the same column will all be greater than the current element , and so if our target is greater than 
// the current element we can start to look at the bottom row in the same column.
//if our target is smaller than the current element we move towards the left side which has decreasing element in the same row but previous column. Keep doing this
// till we reach the left bottom corner. 


class Solution {
    public boolean searchMatrix(int[][] matrix, int target) {
        int row = matrix.length;
        int col = matrix[0].length;
        int i =0, j= col-1;  //starting from top right we will check we reach bottom row or leftmost column
        
        while(i < row && j >=0){
            if(matrix[i][j] == target){
                return true;
            }else if (matrix[i][j] < target){
                i++;
            }else{
                j--;
            }
            
        }
        return false;
        
    }
}
